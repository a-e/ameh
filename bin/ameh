#! /usr/bin/env python

script_name = "ameh: Atlassian maintenance helper"

__doc__ = """
Usage::

    ameh <command> [options]

Command may be:

    init:   Deploy init.d scripts
    config: View configuration files
    log:    View log files

Run ``ameh <command>`` with no further arguments to get help.
"""
usage = __doc__

import sys
import textwrap

# Sys hack to use during development; should be removed later
sys.path.append('.')
import libameh

class UsageError (Exception):
    pass

def exit_msg(usage, text=''):
    """Print usage notes along with a message, then exit.
    """
    print(script_name)
    print(textwrap.dedent(usage).lstrip())
    if text:
        print(text)
    sys.exit(1)

def init_command(args):
    """
    Deploy init.d scripts for Atlassian applications.
    """
    pass

def config_command(args):
    """
    config: View or edit Atlassian configuration files.

    Usage::

        ameh config <application> [property]
        ameh config <application> [property] [value]

    where <application> is the name of one of your configured Atlassian products.

    Examples::

        ameh config all         # Show all configuration for all applications
        ameh config jira        # Show all Jira configuration
        ameh config jira db     # Show path to Jira's database configuration file

    """
    # Need at least an app name
    if len(args) < 1:
        raise UsageError("Please provide an application name")

    app = args.pop(0)
    config = libameh.Config()

    if args:
        prop = args.pop(0)
        config.show_prop(app, prop)
    else:
        config.show_app(app)



def log_command(args):
    """
    log: View log files for Atlassian applications.
    """
    pass

command_functions = {
    'init': init_command,
    'config': config_command,
    'log': log_command,
}

if __name__ == '__main__':
    if len(sys.argv) < 2:
        exit_msg(usage)

    args = sys.argv[1:]
    command = args.pop(0)

    if command not in command_functions:
        exit_msg(usage, "Unknown command: '%s'" % command)

    function = command_functions[command]

    # All commands need at least one argument
    if not args:
        exit_msg(function.__doc__)
        sys.exit(0)

    # Run the command and catch exceptions
    try:
        command_functions[command](args)
    except UsageError, message:
        exit_msg(function.__doc__, message)
    except KeyboardInterrupt:
        print("Aborted!")
        sys.exit(0)

